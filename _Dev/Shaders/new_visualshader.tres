[gd_resource type="VisualShader" load_steps=19 format=2]

[sub_resource type="VisualShaderNodeVec3Constant" id=1]
constant = Vector3( 0, 1, 0 )

[sub_resource type="VisualShaderNodeVec3Constant" id=2]
constant = Vector3( -1, 1, 0 )

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
output_port_for_preview = 0
function = 6

[sub_resource type="VisualShaderNodeVectorOp" id=9]
output_port_for_preview = 0
operator = 11

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.9

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeVectorOp" id=12]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "LineWidth"

[sub_resource type="VisualShaderNodeScalarUniform" id=14]
uniform_name = "GridScale"

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "world"

[sub_resource type="VisualShaderNodeTransformFunc" id=16]

[sub_resource type="VisualShaderNodeTransformVecMult" id=17]

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 5.0

[sub_resource type="VisualShaderNodeVectorFunc" id=7]
function = 20

[sub_resource type="VisualShaderNodeExpression" id=8]
output_port_for_preview = 0
size = Vector2( 340, 257 )
expression = "Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);"

[resource]
code = "shader_type spatial;
render_mode blend_add, depth_draw_never, cull_disabled, specular_schlick_ggx, shadows_disabled;

uniform float LineWidth;
uniform float GridScale;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:17
	float n_out17p0 = LineWidth;

// Input:20
	mat4 n_out20p0 = WORLD_MATRIX;

// TransformFunc:21
	mat4 n_out21p0 = inverse(n_out20p0);

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// TransformVectorMult:22
	vec3 n_out22p0 = (n_out21p0 * vec4(n_out2p0, 1.0)).xyz;

// ScalarUniform:18
	float n_out18p0 = GridScale;

// VectorOp:4
	vec3 n_out4p0 = n_out22p0 * vec3(n_out18p0);

// VectorFunc:6
	vec3 n_out6p0 = fract(n_out4p0);

// Vector:10
	vec3 n_out10p0 = vec3(0.000000, 1.000000, 0.000000);

// Vector:11
	vec3 n_out11p0 = vec3(-1.000000, 1.000000, 0.000000);

// Expression:9
	vec3 n_out9p0;
	n_out9p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out9p0 = n_out11p0.x + (n_out6p0 - n_out10p0.x) * (n_out11p0.y - n_out11p0.x) / (n_out10p0.y - n_out10p0.x);
	}

// VectorFunc:12
	vec3 n_out12p0 = abs(n_out9p0);

// VectorOp:13
	vec3 n_out13p0 = step(vec3(n_out17p0), n_out12p0);

// VectorDecompose:15
	float n_out15p0 = n_out13p0.x;
	float n_out15p1 = n_out13p0.y;
	float n_out15p2 = n_out13p0.z;

// VectorOp:16
	vec3 n_out16p0 = vec3(n_out15p0) + vec3(n_out15p1);

// Output:0
	EMISSION = n_out16p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1252.29, 63.4475 )
modes/blend = 1
modes/cull = 2
modes/depth_draw = 2
flags/shadows_disabled = true
nodes/fragment/0/position = Vector2( 2000, 200 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -1180, 360 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -180, 200 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -460, 380 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 0, 200 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 400, 200 )
nodes/fragment/9/size = Vector2( 340, 257 )
nodes/fragment/9/input_ports = "0,1,In;1,1,InMinMax;2,1,OutMinMax;"
nodes/fragment/9/output_ports = "0,1,Out;"
nodes/fragment/9/expression = "Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);"
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -40, 420 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -40, 500 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 1040, 340 )
nodes/fragment/13/node = SubResource( 9 )
nodes/fragment/13/position = Vector2( 1260, 240 )
nodes/fragment/14/node = SubResource( 10 )
nodes/fragment/14/position = Vector2( 1040, 280 )
nodes/fragment/15/node = SubResource( 11 )
nodes/fragment/15/position = Vector2( 1460, 240 )
nodes/fragment/16/node = SubResource( 12 )
nodes/fragment/16/position = Vector2( 1660, 240 )
nodes/fragment/17/node = SubResource( 13 )
nodes/fragment/17/position = Vector2( 1040, 220 )
nodes/fragment/18/node = SubResource( 14 )
nodes/fragment/18/position = Vector2( -520, 460 )
nodes/fragment/20/node = SubResource( 15 )
nodes/fragment/20/position = Vector2( -980, 180 )
nodes/fragment/21/node = SubResource( 16 )
nodes/fragment/21/position = Vector2( -800, 180 )
nodes/fragment/22/node = SubResource( 17 )
nodes/fragment/22/position = Vector2( -620, 180 )
nodes/fragment/23/node = SubResource( 18 )
nodes/fragment/23/position = Vector2( -1000, 360 )
nodes/fragment/connections = PoolIntArray( 4, 0, 6, 0, 6, 0, 9, 0, 10, 0, 9, 1, 11, 0, 9, 2, 9, 0, 12, 0, 12, 0, 13, 1, 13, 0, 15, 0, 15, 1, 16, 1, 15, 0, 16, 0, 16, 0, 0, 5, 17, 0, 13, 0, 20, 0, 21, 0, 21, 0, 22, 0, 22, 0, 4, 0, 18, 0, 4, 1, 2, 0, 22, 1 )
