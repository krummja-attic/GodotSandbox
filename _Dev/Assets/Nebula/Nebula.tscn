[gd_scene load_steps=16 format=2]

[ext_resource path="res://_Dev/Assets/Nebula/Art/128_SphereMesh.gltf" type="PackedScene" id=1]

[sub_resource type="VisualShaderNodeColorUniform" id=1]
output_port_for_preview = 0
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeFresnel" id=16]

[sub_resource type="VisualShaderNodeVectorOp" id=17]
operator = 2

[sub_resource type="OpenSimplexNoise" id=2]
seed = 2
period = 109.3
persistence = 0.67
lacunarity = 1.36

[sub_resource type="NoiseTexture" id=3]
width = 1024
height = 1024
noise = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = SubResource( 3 )
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="OpenSimplexNoise" id=10]
period = 256.0
persistence = 0.337
lacunarity = 0.88

[sub_resource type="NoiseTexture" id=11]
width = 2048
height = 2048
noise = SubResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=12]
texture = SubResource( 11 )
texture_type = 1

[sub_resource type="VisualShader" id=7]
code = "shader_type spatial;
render_mode blend_add, cull_disabled, specular_disabled;

uniform sampler2D tex_vtx_2 : hint_albedo;
uniform sampler2D tex_vtx_6 : hint_albedo;
uniform vec4 ColorUniform : hint_color;



void vertex() {
// Input:3
	vec3 n_out3p0 = VERTEX;

// Texture:2
	vec4 tex_vtx_2_read = texture(tex_vtx_2, UV.xy);
	vec3 n_out2p0 = tex_vtx_2_read.rgb;
	float n_out2p1 = tex_vtx_2_read.a;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 * n_out2p0;

// Texture:6
	vec4 tex_vtx_6_read = texture(tex_vtx_6, UV.xy);
	vec3 n_out6p0 = tex_vtx_6_read.rgb;
	float n_out6p1 = tex_vtx_6_read.a;

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 * n_out6p0;

// Output:0
	VERTEX = n_out5p0;

}

void fragment() {
// ColorUniform:3
	vec3 n_out3p0 = ColorUniform.rgb;
	float n_out3p1 = ColorUniform.a;

// Fresnel:4
	float n_in4p3 = 1.00000;
	float n_out4p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in4p3);

// VectorOp:5
	vec3 n_out5p0 = vec3(n_out4p0) * n_out3p0;

// Output:0
	ALPHA = n_out3p1;
	EMISSION = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1513.28, 197.789 )
modes/blend = 1
modes/cull = 2
modes/specular = 4
nodes/vertex/0/position = Vector2( 600, 260 )
nodes/vertex/2/node = SubResource( 4 )
nodes/vertex/2/position = Vector2( -180, 200 )
nodes/vertex/3/node = SubResource( 5 )
nodes/vertex/3/position = Vector2( -160, 120 )
nodes/vertex/4/node = SubResource( 6 )
nodes/vertex/4/position = Vector2( 100, 140 )
nodes/vertex/5/node = SubResource( 9 )
nodes/vertex/5/position = Vector2( 380, 260 )
nodes/vertex/6/node = SubResource( 12 )
nodes/vertex/6/position = Vector2( -180, 420 )
nodes/vertex/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 6, 0, 5, 1, 4, 0, 5, 0, 5, 0, 0, 0 )
nodes/fragment/0/position = Vector2( -560, 160 )
nodes/fragment/3/node = SubResource( 1 )
nodes/fragment/3/position = Vector2( -1660, 220 )
nodes/fragment/4/node = SubResource( 16 )
nodes/fragment/4/position = Vector2( -1660, 80 )
nodes/fragment/5/node = SubResource( 17 )
nodes/fragment/5/position = Vector2( -1400, 180 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 3, 0, 5, 1, 3, 1, 0, 1, 5, 0, 0, 5 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/ColorUniform = Color( 0.556863, 0.298039, 0.298039, 0.141176 )

[node name="Nebula" instance=ExtResource( 1 )]

[node name="Sphere" parent="." index="0"]
cast_shadow = 0
material/0 = SubResource( 8 )

[node name="OmniLight" type="OmniLight" parent="." index="1"]
light_energy = 3.062
__meta__ = {
"volumetric": 0.0
}
